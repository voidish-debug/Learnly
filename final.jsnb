{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "const style = document.createElement('style');\nstyle.innerHTML = `\n    body {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        min-height: 100vh;\n        margin: 0;\n        font-family: Arial, sans-serif;\n        background-color: #FFC5D3; \n    }\n\n    .hud {\n        font-size: 20px;\n        font-weight: bold;\n        color: #000000;\n        margin: 1px;\n    }\n\n    #scoreContainer {\n        display: flex;\n        justify-content: center;\n        width: 100%;\n        margin-bottom: 5px; /* Space between score and other trackers */\n        margin-left: 55px;\n    }\n\n    #trackersContainer {\n        display: flex;\n        justify-content: space-between;\n        width: 100%;\n        max-width: 400px; /* Limit width to align with game container */\n    }\n\n    #restartButton {\n        background-color: #ff4c4c;\n        border: none;\n        border-radius: 20px;\n        color: white;\n        font-size: 18px;\n        padding: 10px 20px;\n        cursor: pointer;\n        transition: all 0.3s ease;\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n        display: none;\n        margin-top: 10px;\n    }\n\n    #restartButton:hover {\n        background-color: #ff6666;\n        transform: scale(1.05);\n    }\n\n    #triviaModal {\n        display: none;\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0, 0, 0, 0.7);\n        justify-content: center;\n        align-items: center;\n        z-index: 100;\n    }\n\n    #triviaModal div {\n        background: #333;\n        padding: 20px;\n        border-radius: 8px;\n        color: #eee;\n    }\n\n    #title {\n        color: #28a745; /* Green color for \"TRIVIA\" title */\n    }\n\n    #triviaModal button {\n        background-color: #28a745;\n        color: white;\n        border: none;\n        border-radius: 8px;\n        cursor: pointer;\n        transition: background-color 0.3s ease;\n    }\n\n    #triviaModal button:hover {\n        background-color: #218838;\n    }\n\n    #triviaQuestion {\n        color: white;\n    }\n\n    .mic-button {\n        font-size: 30px;\n        background-color: #28a745;\n        color: white;\n        border: none;\n        border-radius: 50%;\n        padding: 10px;\n        cursor: pointer;\n        transition: transform 0.2s ease;\n    }\n\n    .mic-button:active {\n        transform: scale(0.95);\n    }\n\n    #game-container {\n        width: 400px;\n        height: 450px;\n        border-radius: 20px;\n        box-shadow: 0px 15px 30px rgba(0, 0, 0, 0.5);\n        background-color: #fff;\n        overflow: hidden;\n        margin-top: 10px;\n    }\n`;\n\ndocument.head.appendChild(style);\n\n\n// Inject the HTML structure dynamically\nconst body = document.body;\nbody.innerHTML = `\n    <div id=\"scoreContainer\">\n        <div id=\"scoreText\" class=\"hud\">Score: 0</div>\n    </div>\n    <div id=\"trackersContainer\">\n        <div id=\"livesText\" class=\"hud\">Revives Left: 3</div>\n        <div id=\"coinText\" class=\"hud\">Coins: 0</div>\n    </div>\n    <div id=\"game-container\"></div>\n\n    <!-- Trivia Modal -->\n    <div id=\"triviaModal\">\n        <div>\n            <h1 id=\"title\">TRIVIA</h1>\n            <h6 id=\"reviveMessage\">(Correct answer revives your character)</h6>\n            <h3 id=\"triviaQuestion\">Trivia Question?</h3>\n            <div id=\"triviaOptions\">\n                <!-- Trivia Options will be dynamically added here -->\n            </div>\n            \n            <!-- Microphone icon, speech display, and submit button -->\n            <div style=\"display: flex; align-items: center;\">\n                <button id=\"micIcon\" style=\"background-color: #28a745; color: white; border-radius: 50%; padding: 10px; font-size: 18px; cursor: pointer;\">\n                    ðŸŽ¤\n                </button>\n                <input type=\"text\" id=\"speechText\" style=\"margin-left: 10px; padding: 5px; font-size: 16px; width: 200px;\" placeholder=\"What are you saying?\">\n                <button id=\"submitAnswer\" style=\"background-color: #007bff; color: white; padding: 10px 20px; margin-left: 10px; cursor: pointer; border: none; border-radius: 5px;\">\n                    Submit Answer\n                </button>\n            </div>\n        </div>\n    </div>\n\n    <!-- Restart Button -->\n    <button id=\"restartButton\">Restart Game</button>\n`;\n\n\n// Game script\nconst phaserScript = document.createElement('script');\nphaserScript.src = \"https://cdn.jsdelivr.net/npm/phaser@3.55.2/dist/phaser.min.js\";\ndocument.head.appendChild(phaserScript);\n\nphaserScript.onload = () => {\n    // Game configuration\n    const config = {\n        type: Phaser.AUTO,\n        width: 400,\n        height: 450,\n        backgroundColor: '#87CEEB',\n        parent: 'game-container', // Attach game canvas to #game-container\n        physics: {\n            default: 'arcade',\n            arcade: {\n                gravity: { y: 0 },\n                debug: false\n            }\n        },\n        scene: {\n            preload: preload,\n            create: create,\n            update: update\n        }\n    };\n\n    // Game variables\n    let player;\n    let cursors;\n    let obstacles;\n    let coins;\n    let score = 0;\n    let coinCount = 0; // Number of coins collected\n    let gameOver = false;\n    let speedMultiplier = 1; // Initial speed multiplier for obstacle velocity\n    let spawnDelay = 1000; // Initial spawn delay (milliseconds)\n    let obstacleTimer; // Timer to handle obstacle spawning\n    let coinTimer; // Timer to handle coin spawning\n    let revivesLeft = 3;\n\n    // Initialize the game\n    const game = new Phaser.Game(config);\n\n    const triviaQuestions = [\n\t  {\n\t\t  question: \"What is the capital of France?\",\n\t\t  options: [\"Berlin\", \"Madrid\", \"Paris\", \"Rome\"],\n\t\t  correctAnswer: \"Paris\",\n\t\t  correctOption: 'c'\n\t  },\n\t  {\n\t\t  question: \"Which planet is known as the Red Planet?\",\n\t\t  options: [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"],\n\t\t  correctAnswer: \"Mars\",\n\t\t  correctOption: 'b'\n\t  },\n\t  {\n\t\t  question: \"What is the largest ocean on Earth?\",\n\t\t  options: [\"Atlantic\", \"Indian\", \"Arctic\", \"Pacific\"],\n\t\t  correctAnswer: \"Pacific\",\n\t\t  correctOption: 'd'\n\t  },\n\t  {\n\t\t  question: \"Which element has the chemical symbol 'O'?\",\n\t\t  options: [\"Oxygen\", \"Gold\", \"Osmium\", \"Oganesson\"],\n\t\t  correctAnswer: \"Oxygen\",\n\t\t  correctOption: 'a'\n\t  },\n\t  {\n\t\t  question: \"Who wrote the play 'Romeo and Juliet'?\",\n\t\t  options: [\"Charles Dickens\", \"J.K. Rowling\", \"William Shakespeare\", \"Mark Twain\"],\n\t\t  correctAnswer: \"William Shakespeare\",\n\t\t  correctOption: 'c'\n\t  },\n\t  {\n\t\t  question: \"What is the tallest mountain in the world?\",\n\t\t  options: [\"K2\", \"Mount Everest\", \"Kangchenjunga\", \"Lhotse\"],\n\t\t  correctAnswer: \"Mount Everest\",\n\t\t  correctOption: 'b'\n\t  },\n\t  {\n\t\t  question: \"Which country is known as the Land of the Rising Sun?\",\n\t\t  options: [\"China\", \"South Korea\", \"Japan\", \"Thailand\"],\n\t\t  correctAnswer: \"Japan\",\n\t\t  correctOption: 'c'\n\t  },\n\t  {\n\t\t  question: \"What is the hardest natural substance on Earth?\",\n\t\t  options: [\"Gold\", \"Iron\", \"Diamond\", \"Silver\"],\n\t\t  correctAnswer: \"Diamond\",\n\t\t  correctOption: 'c'\n\t  },\n\t  {\n\t\t  question: \"Who painted the Mona Lisa?\",\n\t\t  options: [\"Vincent van Gogh\", \"Leonardo da Vinci\", \"Pablo Picasso\", \"Claude Monet\"],\n\t\t  correctAnswer: \"Leonardo da Vinci\",\n\t\t  correctOption: 'b'\n\t  },\n\t  {\n\t\t  question: \"What is the largest mammal in the world?\",\n\t\t  options: [\"Elephant\", \"Giraffe\", \"Blue Whale\", \"Shark\"],\n\t\t  correctAnswer: \"Blue Whale\",\n\t\t  correctOption: 'c'\n\t  },\n\t  {\n\t\t  question: \"Which country hosted the 2016 Summer Olympics?\",\n\t\t  options: [\"China\", \"Brazil\", \"United Kingdom\", \"South Korea\"],\n\t\t  correctAnswer: \"Brazil\",\n\t\t  correctOption: 'b'\n\t  },\n\t  {\n\t\t  question: \"Which gas do plants absorb from the atmosphere?\",\n\t\t  options: [\"Oxygen\", \"Nitrogen\", \"Carbon Dioxide\", \"Helium\"],\n\t\t  correctAnswer: \"Carbon Dioxide\",\n\t\t  correctOption: 'c'\n\t  },\n\t  {\n\t\t  question: \"What is the smallest planet in our solar system?\",\n\t\t  options: [\"Mercury\", \"Mars\", \"Venus\", \"Earth\"],\n\t\t  correctAnswer: \"Mercury\",\n\t\t  correctOption: 'a'\n\t  },\n\t  {\n\t\t  question: \"Which country is famous for the Eiffel Tower?\",\n\t\t  options: [\"Italy\", \"Spain\", \"France\", \"Germany\"],\n\t\t  correctAnswer: \"France\",\n\t\t  correctOption: 'c'\n\t  },\n\t  {\n\t\t  question: \"Who discovered gravity?\",\n\t\t  options: [\"Albert Einstein\", \"Isaac Newton\", \"Galileo Galilei\", \"Nikola Tesla\"],\n\t\t  correctAnswer: \"Isaac Newton\",\n\t\t  correctOption: 'b'\n\t  },\n\t  {\n\t\t  question: \"What type of animal is the largest species of shark?\",\n\t\t  options: [\"Great White\", \"Hammerhead\", \"Whale Shark\", \"Tiger Shark\"],\n\t\t  correctAnswer: \"Whale Shark\",\n\t\t  correctOption: 'c'\n\t  },\n\t  {\n\t\t  question: \"What is the boiling point of water in Celsius?\",\n\t\t  options: [\"0Â°C\", \"50Â°C\", \"100Â°C\", \"212Â°C\"],\n\t\t  correctAnswer: \"100Â°C\",\n\t\t  correctOption: 'c'\n\t  },\n\t  {\n\t\t  question: \"What is the square root of 64?\",\n\t\t  options: [\"6\", \"7\", \"8\", \"9\"],\n\t\t  correctAnswer: \"8\",\n\t\t  correctOption: 'c'\n\t  },\n\t  {\n\t\t  question: \"Which planet is closest to the Sun?\",\n\t\t  options: [\"Earth\", \"Mars\", \"Venus\", \"Mercury\"],\n\t\t  correctAnswer: \"Mercury\",\n\t\t  correctOption: 'd'\n\t  },\n\t  {\n\t\t  question: \"What is the most spoken language in the world?\",\n\t\t  options: [\"Spanish\", \"Mandarin\", \"English\", \"Hindi\"],\n\t\t  correctAnswer: \"Mandarin\",\n\t\t  correctOption: 'b'\n\t  },\n\t  {\n\t\t  question: \"Who was the first president of the United States?\",\n\t\t  options: [\"Abraham Lincoln\", \"George Washington\", \"Thomas Jefferson\", \"John Adams\"],\n\t\t  correctAnswer: \"George Washington\",\n\t\t  correctOption: 'b'\n\t  },\n\t  {\n\t\t  question: \"Which organ in the human body pumps blood?\",\n\t\t  options: [\"Lungs\", \"Liver\", \"Heart\", \"Kidneys\"],\n\t\t  correctAnswer: \"Heart\",\n\t\t  correctOption: 'c'\n\t  },\n\t  {\n\t\t  question: \"What is the currency of Japan?\",\n\t\t  options: [\"Yen\", \"Won\", \"Dollar\", \"Peso\"],\n\t\t  correctAnswer: \"Yen\",\n\t\t  correctOption: 'a'\n\t  }\n  ];\n\n\n    // Get reference to the restart button, score, and coin tracker\n    const restartButton = document.getElementById('restartButton');\n    const scoreTextElement = document.getElementById('scoreText');\n    const coinTextElement = document.getElementById('coinText');\n    restartButton.style.display = 'none';\n    restartButton.addEventListener('click', () => restartGame());\n\n    let currentQuestionIndex = -1;\n\n    function showTriviaModal() {\n        // Pick a random question\n        currentQuestionIndex = Phaser.Math.Between(0, triviaQuestions.length - 1);\n        const trivia = triviaQuestions[currentQuestionIndex];\n\n        // Display question\n        const questionElement = document.getElementById('triviaQuestion');\n        questionElement.textContent = trivia.question;\n\n        // Display options\n        const optionsContainer = document.getElementById('triviaOptions');\n        optionsContainer.innerHTML = ''; // Clear previous options\n        trivia.options.forEach(option => {\n            const button = document.createElement('button');\n            button.textContent = option;\n            button.style.display = 'block';\n            button.style.marginBottom = '10px';\n            button.style.padding = '10px 20px';\n            button.style.backgroundColor = '#007bff';\n            button.style.color = 'white';\n            button.style.border = 'none';\n            button.style.cursor = 'pointer';\n            button.onclick = () => handleAnswer(option);\n            optionsContainer.appendChild(button);\n        });\n\n        // Show the modal\n        document.getElementById('triviaModal').style.display = 'flex';\n    }\n\n    function handleAnswer(selectedAnswer) {\n        const trivia = triviaQuestions[currentQuestionIndex];\n        if (selectedAnswer === trivia.correctAnswer) {\n            if (revivesLeft > 0) {\n                revivesLeft--;\n                updateLivesDisplay();  // Update the lives display\n                resumeGame();\n            }\n        } else {\n            gameOver = true;\n            scoreTextElement.textContent = 'Game Over! Final Score: ' + score;\n            document.getElementById('triviaModal').style.display = 'none';\n            restartButton.style.display = 'block';\n            game.physics.pause();\n        }\n    }\n    \n    \n    \n    function resumeGame() {\n        // Hide the trivia modal\n        document.getElementById('triviaModal').style.display = 'none';\n    \n        // Clear any existing obstacles and coins on the screen\n        obstacles.clear(true, true);\n        coins.clear(true, true);\n    \n        // Reset player appearance and game state\n        player.clearTint();\n        gameOver = false;\n    \n        // Resume game physics\n        game.physics.resume();\n    }\n    \n    \n    \n    function preload() {\n        // Load assets\n        this.load.image('player', 'https://examples.phaser.io/assets/sprites/ghost.png');\n        this.load.image('obstacle', 'https://examples.phaser.io/assets/sprites/spikedball.png');\n    }\n\n    function create() {\n        // Create the player\n        player = this.physics.add.sprite(200, 550, 'player').setScale(0.8);\n        player.setCollideWorldBounds(true);\n\n        // Create a group for obstacles and coins\n        obstacles = this.physics.add.group();\n        coins = this.physics.add.group();\n\n        // Add a collider between the player and obstacles\n        this.physics.add.collider(player, obstacles, hitObstacle, null, this);\n\n        // Add a collider between the player and coins\n        this.physics.add.collider(player, coins, collectCoin, null, this);\n\n        // Set up keyboard controls\n        cursors = this.input.keyboard.createCursorKeys();\n\n        // Initial obstacle spawning\n        obstacleTimer = this.time.addEvent({\n            delay: spawnDelay,\n            callback: addObstacle,\n            callbackScope: this,\n            loop: true\n        });\n\n        // Initial coin spawning\n        coinTimer = this.time.addEvent({\n            delay: 3000, // Coins spawn every 3 seconds\n            callback: addCoin,\n            callbackScope: this,\n            loop: true\n        });\n\n        // Gradually increase speed and spawn rate over time\n        this.time.addEvent({\n            delay: 5000, // Every 5 seconds\n            callback: increaseDifficulty,\n            callbackScope: this,\n            loop: true\n        });\n    }\n\n    function update() {\n\t  if (gameOver) return;\n\n\t  // Move player left and right\n\t  if (cursors.left.isDown) {\n\t\t  player.setVelocityX(-300);\n\t  } else if (cursors.right.isDown) {\n\t\t  player.setVelocityX(300);\n\t  } else {\n\t\t  player.setVelocityX(0);\n\t  }\n\n\t  // Update score\n\t  score += 1;\n\t  scoreTextElement.textContent = 'Score: ' + score;\n\t  coinTextElement.textContent = 'Coins: ' + coinCount;\n\n\t  // Slow gradient transition effect\n\tconst transitionSpeed = 0.0003; // Control speed (lower value = slower transition)\n\tconst maxScore = 20000; // Total score for a full cycle\n\n\tconst colors = [\n\t  Phaser.Display.Color.HexStringToColor(\"#87CEEB\"), // Light Blue\n\t  Phaser.Display.Color.HexStringToColor(\"#e74444\"), // Red\n\t  Phaser.Display.Color.HexStringToColor(\"#800080\"), // Purple\n\t];\n\tconst numTransitions = colors.length;\n\tconst progress = (score * transitionSpeed) % 1; // Keep progress within 0 and 1 for each transition phase\n\n\t// Calculate the current color transition index\n\tconst index = Math.floor((score * transitionSpeed) % numTransitions);\n\tconst startColor = colors[index];\n\tconst endColor = colors[(index + 1) % numTransitions];\n\n\t// Interpolate between startColor and endColor\n\tconst color = Phaser.Display.Color.Interpolate.ColorWithColor(\n\t  startColor,\n\t  endColor,\n\t  maxScore / numTransitions,\n\t  progress * (maxScore / numTransitions)\n\t);\n\n\t// Set background color\n\tconst backgroundColor = Phaser.Display.Color.GetColor(color.r, color.g, color.b);\n\tgame.config.backgroundColor.setTo(color.r, color.g, color.b);\n  }\n\n\n\n    function addObstacle() {\n        if (gameOver) return; // Stop spawning obstacles if the game is over\n\n        const numberOfObstacles = Phaser.Math.Between(1, 2);\n\n        let previousX = null; // To store the position of the first obstacle\n\n        for (let i = 0; i < numberOfObstacles; i++) {\n            let x;\n\n            if (i === 1 && previousX !== null) {\n                // Ensure a minimum distance of 100 pixels between two obstacles\n                do {\n                    x = Phaser.Math.Between(50, 350);\n                } while (Math.abs(x - previousX) < 100);\n            } else {\n                x = Phaser.Math.Between(50, 350);\n            }\n\n            const obstacle = obstacles.create(x, 0, 'obstacle').setScale(1.8);\n            obstacle.setVelocityY(200 * speedMultiplier); // Apply speed multiplier to obstacle velocity\n            obstacle.setCollideWorldBounds(false);\n            obstacle.checkWorldBounds = true;\n            obstacle.outOfBoundsKill = true;\n            obstacle.setAngularVelocity(50); // Adds rotation to each obstacle\n            previousX = x; // Store the x position of the first obstacle\n        }\n    }\n\n    function addCoin() {\n        if (gameOver) return; // Stop spawning coins if the game is over\n    \n        const minDistance = 50; // Minimum distance from any obstacle\n    \n        let x, y, tooClose;\n    \n        do {\n            // Generate random x-position within game boundaries and set y to start at 0\n            x = Phaser.Math.Between(50, 350);\n            y = 0;\n            tooClose = false;\n    \n            // Check distance from each obstacle\n            obstacles.getChildren().forEach(obstacle => {\n                const distance = Phaser.Math.Distance.Between(x, y, obstacle.x, obstacle.y);\n                if (distance < minDistance) {\n                    tooClose = true; // Set flag if too close to any obstacle\n                }\n            });\n        } while (tooClose);\n    \n        // Create the coin at a position that is safely away from obstacles\n        const coin = coins.create(x, y, 'coinTexture');\n        coin.setOrigin(0.5, 0.5); // Center the coin on its position\n        coin.setVelocityY(200 * speedMultiplier); // Apply speed multiplier to coin velocity\n        coin.setCollideWorldBounds(false);\n        coin.checkWorldBounds = true;\n        coin.outOfBoundsKill = true;\n    }\n    \n    function preload() {\n        // Load assets for player and obstacle\n        this.load.image('player', 'https://examples.phaser.io/assets/sprites/ghost.png');\n        this.load.image('obstacle', 'https://examples.phaser.io/assets/sprites/spikedball.png');\n    \n        // Generate and save the coin texture if not preloaded\n        const graphics = this.add.graphics({ fillStyle: { color: 0xFFD700 } });\n        graphics.fillCircle(20, 20, 20); // Create the gold coin shape\n        graphics.generateTexture('coinTexture', 40, 40); // Generate texture for reuse\n        graphics.destroy(); // Remove the temporary graphics object\n    }\n    \n    \n    \n\n    function increaseDifficulty() {\n        // Increase the speed multiplier by 10%\n        speedMultiplier += 0.05;\n\n        // Decrease the spawn delay, down to a minimum of 300 ms\n        spawnDelay = Math.max(spawnDelay - 100, 700);\n\n        // Reset the obstacle timer with the new spawn delay\n        obstacleTimer.remove(false); // Remove the existing timer without destroying it\n        obstacleTimer = this.time.addEvent({\n            delay: spawnDelay,\n            callback: addObstacle,\n            callbackScope: this,\n            loop: true\n        });\n    }\n\n    function collectCoin(player, coin) {\n        // Disable the coin's physics body to prevent multiple overlaps\n        coin.body.enable = false;\n    \n        // Create a tween animation to move the coin towards the player\n        this.tweens.add({\n            targets: coin,\n            x: player.x, // Move to player's X position\n            y: player.y, // Move to player's Y position\n            scale: 0, // Gradually scale down\n            duration: 300, // Duration of the animation in ms\n            onComplete: () => {\n                coin.destroy(); // Destroy coin when it reaches the player\n                coinCount += 1; // Increment the coin count\n                coinTextElement.textContent = 'Coins: ' + coinCount; // Update coin display\n            }\n        });\n    }\n    \n    \n     \n    function hitObstacle(player, obstacle) {\n        if (!gameOver) {\n            if (revivesLeft > 0) {\n                gameOver = true;\n                player.setTint(0xff0000);\n                showTriviaModal();\n            } else {\n                // Set gameOver to true and handle game-over behavior\n                gameOver = true;\n                player.setTint(0xff0000);\n                scoreTextElement.textContent = 'Game Over! Final Score: ' + score;\n                restartButton.style.display = 'block';\n            }\n        }\n    }\n    \n    function restartGame() {\n        // Fully restart the scene and reset all variables\n        restartButton.style.display = 'none';\n        obstacles.clear(true, true);\n        coins.clear(true, true);\n        score = 0;\n        coinCount = 0;\n        gameOver = false;\n        speedMultiplier = 1;\n        spawnDelay = 1000;\n        revivesLeft = 3; \n        updateLivesDisplay();\n    \n        // Completely restart the scene and reset physics and other settings\n        game.scene.stop();  // Stop the current scene to reset all configurations\n        game.scene.start();  // Start the scene from scratch\n    }\n    \n    \n    \n    function updateLivesDisplay() {\n        document.getElementById('livesText').textContent = 'Revives Left: ' + revivesLeft;\n    }\n\n\n    function startVoiceInput() {\n        const micIcon = document.getElementById('micIcon');\n        const speechText = document.getElementById('speechText');  // Text field to display spoken words\n    \n        micIcon.addEventListener('click', () => {\n            // Call the function that starts voice recognition\n            startRecognition(speechText);\n        });\n    }\n    \n    document.getElementById('submitAnswer').addEventListener('click', () => {\n        const spokenAnswer = document.getElementById('speechText').value;\n        handleVoiceAnswer(spokenAnswer);\n    });\n    \n    \n    function startRecognition(speechText) {\n        if (!('webkitSpeechRecognition' in window)) {\n            alert('Voice input is not supported in this browser.');\n            return;\n        }\n    \n        const recognition = new webkitSpeechRecognition();\n        recognition.lang = 'en-US';\n        recognition.interimResults = true;  // Allow real-time updates\n        recognition.continuous = true;  // Keep recognizing speech until stopped\n    \n        recognition.start();\n    \n        recognition.onresult = (event) => {\n            let transcript = '';\n            // Loop through all results and combine them\n            for (let i = event.resultIndex; i < event.results.length; i++) {\n                transcript += event.results[i][0].transcript;\n            }\n            // Update the speech text input live with the spoken words\n            speechText.value = transcript;\n        };\n    \n        recognition.onerror = (event) => {\n            console.error('Speech recognition error', event);\n        };\n    }\n    \n    \n    function handleVoiceAnswer(submittedAnswer) {\n        const trivia = triviaQuestions[currentQuestionIndex];\n        const correctAnswer = trivia.correctAnswer.toLowerCase();\n        const correctOption = trivia.correctOption.toLowerCase(); // Ensure comparison is case-insensitive\n        const normalizedSubmitted = submittedAnswer.trim().toLowerCase();\n        // Check if the submitted answer matches the correct answer text\n        if (normalizedSubmitted === correctAnswer || normalizedSubmitted === correctOption) {\n            console.log(\"Correct answer!\");\n            alert(\"Correct answer!\"); // Feedback to user\n            if (revivesLeft > 0) {\n                revivesLeft--;\n                updateLivesDisplay();\n                resumeGame();\n            }\n        } else {\n            console.log(\"Incorrect answer.\");\n            alert(\"Incorrect answer.\"); // Feedback to user\n            // Game over if the answer is incorrect\n            gameOver = true;\n            scoreTextElement.textContent = 'Game Over! Final Score: ' + score;\n            document.getElementById('triviaModal').style.display = 'none';\n            restartButton.style.display = 'block';\n            game.physics.pause();\n        }\n    }\n    \n    \n    function handleAnswer(selectedAnswer) {\n        const trivia = triviaQuestions[currentQuestionIndex];\n        \n        if (selectedAnswer === trivia.correctAnswer) {\n            if (revivesLeft > 0) {\n\t\t\t  \talert(\"Correct Answer!\");\n                revivesLeft--;\n                updateLivesDisplay();\n                resumeGame();\n            }\n        } else {\n\t\t  \talert(\"Incorrect Answer. Game Over!\");\n            gameOver = true;\n            scoreTextElement.textContent = 'Game Over! Final Score: ' + score;\n            document.getElementById('triviaModal').style.display = 'none';\n            restartButton.style.display = 'block';\n            game.physics.pause();\n        }\n    }\n    \n    \n    function showNextQuestion() {\n        const trivia = triviaQuestions[currentQuestionIndex];\n        document.getElementById('triviaQuestion').textContent = trivia.question;\n        const triviaOptions = document.getElementById('triviaOptions');\n        triviaOptions.innerHTML = '';  // Clear previous options\n    \n        trivia.options.forEach((option, index) => {\n            const optionElement = document.createElement('button');\n            optionElement.textContent = `${String.fromCharCode(65 + index)}. ${option}`;\n            optionElement.onclick = () => handleAnswer(option, trivia.correctAnswer);\n            triviaOptions.appendChild(optionElement);\n        });\n    }\n    \n    // Initialize the voice input functionality\n    startVoiceInput();\n};",
      "status": "",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}
